<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Power Query on Praveen Lobo</title><link>https://praveenlobo.com/tags/power-query/</link><description>Recent content in Power Query on Praveen Lobo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 05 Oct 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://praveenlobo.com/tags/power-query/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Excel To Compare Multiple XMLs</title><link>https://praveenlobo.com/blog/using-excel-to-compare-multiple-xmls/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://praveenlobo.com/blog/using-excel-to-compare-multiple-xmls/</guid><description>&lt;p>The VBA code from &lt;a href="https://praveenlobo.com/blog/comparing-two-xmls-in-excel-vba">last post&lt;/a> explains how two XML strings that are already on the spreadsheet can be compared. This can be extended to add a search functionality to search and bring in the XML before running the comparison.&lt;/p>
&lt;h4 id="search-file">Search File:&lt;/h4>
&lt;p>To get a matching line from a file, use VBA code as shown &lt;a href="https://github.com/lobopraveen/gists/blob/master/msexcel/vba_extract_matching_line_from_a_file.vba">here&lt;/a> on the gists repo I maintain. Or just use power query as shown below and place the result in the XML cell. Note that the power query returns all matching lines as opposed to the aforementioned VBA code which returns the first occurrence. The VBA code can be edited to return multiple lines if needed.&lt;/p></description></item></channel></rss>